from tkinter import Menu, Canvas
#######################
from pandastable_local.headers import ColumnHeader
from pandastable_local.headers import RowHeader as RH
#  from pandastable_local.headers import C
from pandastable_local.dialogs import applyStyle
from pandastable_local.util import check_multiindex


class MColumnHeader(ColumnHeader):
    def __init__(self, parent=None, table=None, fgcolor='white', bgcolor='gray25'):
        Canvas.__init__(self, parent, bg=bgcolor, width=500, height=25)
        self.thefont = 'Arial 14'
        self.bgcolor = bgcolor
        self.fgcolor = fgcolor
        if table != None:
            self.table = table
            self.model = self.table.model
            if check_multiindex(self.model.df.columns) == 1:
                self.height = 40
            else:
                self.height = self.table.rowheight
            self.config(width=self.table.width, height=self.height)
            self.columnlabels = self.model.df.columns
            self.draggedcol = None
            self.bind('<Button-1>',self.handle_left_click)
            self.bind("<ButtonRelease-1>", self.handle_left_release)
            self.bind('<B1-Motion>', self.handle_mouse_drag)
            self.bind('<Motion>', self.handle_mouse_move)
            self.bind('<Shift-Button-1>', self.handle_left_shift_click)
            self.bind('<Control-Button-1>', self.handle_left_ctrl_click)
            self.bind("<Double-Button-1>",self.handle_double_click)
            self.bind('<Leave>', self.leave)
            if self.table.ostyp=='darwin':
                #For mac we bind Shift, left-click to right click
                self.bind("<Button-2>", self.handle_right_click)
                self.bind('<Shift-Button-1>',self.handle_right_click)
            else:
                self.bind("<Button-3>", self.handle_right_click)
            self.thefont = self.table.thefont
            self.wrap = False
            self.setDefaults()
        return

    def handle_double_click(self, event):
        """Modified original Double click sorts by this column. """
        self.renameColumn()
        return

    def popupMenu(self, event):
        """Add left and right click behaviour for column header"""

        df = self.table.model.df
        if len(df.columns) == 0:
            return
        ismulti = check_multiindex(df.columns)
        #  colname = str(df.columns[self.table.currentcol])
        #  currcol = self.table.currentcol
        multicols = self.table.multiplecollist
        colnames = list(df.columns[multicols])[:4]
        colnames = [str(i)[:20] for i in colnames]
        if len(colnames) > 2:
            colnames = ','.join(colnames[:2]) + \
                '+%s others' % str(len(colnames) - 2)
        else:
            colnames = ','.join(colnames)
        popupmenu = Menu(self, tearoff=0)

        def popupFocusOut(event):
            popupmenu.unpost()

        #  columncommands = {"Rename": self.renameColumn,
        #                    "Add": self.table.addColumn,
        #                    #  "Delete": self.table.deleteColumn,
        #                    "Copy": self.table.copyColumn,
        #                    "Move to Start": self.table.moveColumns,
        #                    "Move to End": lambda: self.table.moveColumns(pos='end')
        #                   }
        #  formatcommands = {'Set Color': self.table.setColumnColors,
        #                    'Color by Value': self.table.setColorbyValue,
        #                    'Alignment': self.table.setAlignment,
        #                    'Wrap Header' : self.table.setWrap
        #                   }
        popupmenu.add_command(
            label="Sort by " + colnames + ' \u2193',
            command=lambda: self.table.sortTable(
                ascending=[
                    1 for i in multicols]))
        popupmenu.add_command(
            label="Sort by " + colnames + ' \u2191',
            command=lambda: self.table.sortTable(
                ascending=[
                    0 for i in multicols]))
        #  popupmenu.add_command(label="Set %s as Index" %colnames, command=self.table.setindex)
        popupmenu.add_command(
            label="Delete Column(s)",
            command=self.table.deleteColumn)
        if ismulti:
            popupmenu.add_command(
                label="Flatten Index",
                command=self.table.flattenIndex)

        popupmenu.add_command(
            label="Rename Column",
            command=self.renameColumn)
        popupmenu.add_command(label="Add Column", command=self.table.addColumn)
        popupmenu.add_command(
            label="Set Color",
            command=self.table.setColumnColors)
        popupmenu.add_command(
            label="Color by Value",
            command=self.table.setColorbyValue)
        popupmenu.add_command(
            label="Set Alignment",
            command=self.table.setAlignment)
        #  popupmenu.add_command(label="Wrap Header", command=self.table.setWrap)
        popupmenu.add_command(
            label="Fill With Data",
            command=self.table.fillColumn)
        #  popupmenu.add_command(label="Create Categorical", command=self.table.createCategorical)
        #  popupmenu.add_command(label="Apply Function", command=self.table.applyColumnFunction)
        #  popupmenu.add_command(label="Resample/Transform", command=self.table.applyTransformFunction)
        #  popupmenu.add_command(label="Value Counts", command=self.table.valueCounts)
        #  popupmenu.add_command(label="String Operation", command=self.table.applyStringMethod)
        #  popupmenu.add_command(label="Date/Time Conversion", command=self.table.convertDates)
        popupmenu.add_command(
            label="Set Data Type",
            command=self.table.setColumnType)

        #  createSubMenu(popupmenu, 'Column', columncommands)
        #  createSubMenu(popupmenu, 'Format', formatcommands)
        popupmenu.bind("<FocusOut>", popupFocusOut)
        popupmenu.focus_set()
        popupmenu.post(event.x_root, event.y_root)
        applyStyle(popupmenu)
        return popupmenu


class RowHeader(RH):
    """Class that displays the row headings (or DataFrame index).
       Takes it's size and rendering from the parent table.
       This also handles row/record selection as opposed to cell
       selection"""

    def __init__(
            self,
            parent=None,
            table=None,
            width=50,
            fgcolor='black',
            bgcolor='gray75'):
        Canvas.__init__(self, parent, bg=bgcolor, width=width, height=None)
        if table is not None:
            self.table = table
            self.width = width
            self.inset = 1
            self.fgcolor = fgcolor
            self.bgcolor = bgcolor
            self.showindex = False
            self.maxwidth = 500
            self.config(height=self.table.height)
            self.startrow = self.endrow = None
            self.model = self.table.model
            self.bind('<Button-1>', self.handle_left_click)
            self.bind("<ButtonRelease-1>", self.handle_left_release)
            self.bind("<Control-Button-1>", self.handle_left_ctrl_click)

            if self.table.ostyp == 'darwin':
                # For mac we bind Shift, left-click to right click
                self.bind("<Button-2>", self.handle_right_click)
                self.bind('<Shift-Button-1>', self.handle_right_click)
            else:
                self.bind("<Button-3>", self.handle_right_click)
            self.bind('<B1-Motion>', self.handle_mouse_drag)
            self.bind('<Shift-Button-1>', self.handle_left_shift_click)
        return

#  class ColumnHeader(Canvas):
#      """Class that takes it's size and rendering from a parent table
#          and column names from the table model."""
#
